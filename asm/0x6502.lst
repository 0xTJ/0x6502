ca65 V2.16 - Git 1ea5889
Main file   : 0x6502.s
Current file: 0x6502.s

000000r 1               .MACPACK generic
000000r 2               
000000r 2               ; add - Add without carry
000000r 2               .macro  add     Arg1, Arg2
000000r 2                       clc
000000r 2                       .if .paramcount = 2
000000r 2                               adc     Arg1, Arg2
000000r 2                       .else
000000r 2                               adc     Arg1
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 2               ; sub - subtract without borrow
000000r 2               .macro  sub     Arg1, Arg2
000000r 2                       sec
000000r 2                       .if .paramcount = 2
000000r 2                               sbc     Arg1, Arg2
000000r 2                       .else
000000r 2                               sbc     Arg1
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 2               ; bge - jump if unsigned greater or equal
000000r 2               .macro  bge     Arg
000000r 2                       bcs     Arg
000000r 2               .endmacro
000000r 2               
000000r 2               ; blt - Jump if unsigned less
000000r 2               .macro  blt     Arg
000000r 2                       bcc     Arg
000000r 2               .endmacro
000000r 2               
000000r 2               ; bgt - jump if unsigned greater
000000r 2               .macro  bgt     Arg
000000r 2                       .local  L
000000r 2                       beq     L
000000r 2                       bcs     Arg
000000r 2               L:
000000r 2               .endmacro
000000r 2               
000000r 2               ; ble - jump if unsigned less or equal
000000r 2               .macro  ble     Arg
000000r 2                       beq     Arg
000000r 2                       bcc     Arg
000000r 2               .endmacro
000000r 2               
000000r 2               ; bnz - jump if not zero
000000r 2               .macro  bnz     Arg
000000r 2                       bne     Arg
000000r 2               .endmacro
000000r 2               
000000r 2               ; bze - jump if zero
000000r 2               .macro  bze     Arg
000000r 2                       beq     Arg
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .MACPACK longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .zeropage
000000r 1               
000000r 1               ;*------------------------------------------------------------------*
000000r 1               ;*                    Interrupt Service Routine                     *
000000r 1               ;*------------------------------------------------------------------*
000000r 1               .code
000000r 1  48           irq:        pha                 ; Save registers to current stack
000001r 1  8A                       txa
000002r 1  48                       pha
000003r 1  98                       tya
000004r 1  48                       pha
000005r 1               
000005r 1  68                       pla
000006r 1  A8                       tay
000007r 1  68                       pla
000008r 1  AA                       tax
000009r 1  68                       pla
00000Ar 1  40                       rti
00000Ar 1               
