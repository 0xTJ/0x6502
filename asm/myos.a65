arg_l   :=  $10
arg_h       :=     $11
arg_16      :=     $10
kcurtask    :=     $80
knxttask    :=     $81
kstkpnts_s  :=     $82
kstkpnts_e  :=     kstkpnts_s + 3
kstkpgs_s   :=     $86
kstkpgs_e   :=     kstkpgs_s + 3
kstkpg_l    :=     $90
kstkpg_h    :=     kstkpg_l + 1
ktmp0       :=     $a0
ktmp1       :=     $a1
ktmp2       :=     $a2
ktmp3       :=     $a3
dispcur_l   :=     $b0
dispcur_h   :=     $b1

stackbase   :=     $0100

screenbase  :=     $0400
screentop   :=     $07e7

keybrdbase  :=     $0300   ; keybrd must be contained within single page
keybrdtop   :=     $037F
keybrdhead  :=     $0380
keybrdtail  :=     $0381

            data
            org     kstkpnts_s
            fcb      $f7, $f7, $f7, $f7
            org     kstkpgs_s
            fcb      $08, $09, $0a, $0b

initstkoffs :=     $f8
task0_stk   :=     $0800
task1_stk   :=     $0900
task2_stk   :=     $0a00
task3_stk   :=     $0b00

            org     task0_stk + initstkoffs
            fcb     $00, $00, $00, $20, lo start0, hi start0
            org     task1_stk + initstkoffs
            fcb     $00, $00, $00, $20, lo start1, hi start1
            org     task2_stk + initstkoffs
            fcb     $00, $00, $00, $20, lo start2, hi start2
            org     task3_stk + initstkoffs
            fcb     $00, $00, $00, $20, lo start3, hi start3

            bss
            org     $0200
            data
            org     $0300
            code
            org     $f000
            
;*------------------------------------------------------------------*
;*                          General Macros                          *
;*------------------------------------------------------------------*
ldargpt     macro   argpointer
            lda #lo argpointer
            sta arg_l
            lda #hi argpointer
            sta arg_h
            endm

;*------------------------------------------------------------------*
;*                             Display                              *
;*------------------------------------------------------------------*
string      macro   name,length,string
            scruct  name
            fcb     length
            fcc     string
            end scruct
            endm

resetdisp   macro
            lda     #lo screenbase
            sta     dispcur_l
            lda     #hi screenbase
            sta     dispcur_h
            endm
            
inccur      ldx     dispcur_l       ; ARGS: N/A, STACK: 2
            ldy     dispcur_h
            cpy     #hi screentop
            bne     inccur_inc
            cpx     #lo screentop
            bne     inccur_inc
            ldx     #lo screenbase
            ldy     #hi screenbase
            lda     #0
            bne     inccur_sto
inccur_inc  inx
            bne     inccur_sto
            iny
inccur_sto  stx     dispcur_l
            sty     dispcur_h
            rts
           
putchar     ldx     #0              ; ARGS: Char, STACK: 2
            lda     (arg_16,x)
            sta     (dispcur_l,x)
            jsr     inccur
            rts

;*------------------------------------------------------------------*
;*                             Keyboard                             *
;*------------------------------------------------------------------*      
            
flushkb     macro
            lda     keybrdtail
            sta     keybrdhead
            endm
            
            bss
getchar_buf rmb     1
            code           
getchar     macro
            ldx     #0
            ldy     keybrdhead
            cpy     keybrdtail
            beq     getchar_ret
            ; We know that there is at least one char in the buffer
            ldy     keybrdhead  ; tmp
            ldx     keybrdbase,y    ; x contains the char
            
            lda     #lo keybrdtop
            sec
            sbc     #lo keybrdbase
            ; clc
            ; adc     #1    
            ; A contains size of buffer
            sec
            cmp     keybrdhead
            bne     getchar_inc
getchar_rst ldy     #0
            jmp     getchar_sto
getchar_inc ldy     keybrdhead
            iny
getchar_sto sty     keybrdhead

getchar_ret stx     getchar_buf
            endm
            
;*------------------------------------------------------------------*
;*                        Kernel Initialize                         *
;*------------------------------------------------------------------*
            code
init        sti ; ALL FLAGS NEED TO BE RESEt ON Boot
            lda     #$00
            sta     knxttask
            jmp     lodstk
            
infloop     jmp     infloop

start0
            sti
            resetdisp
keyloop     
            getchar
            lda     getchar_buf
            beq     keyloop_lop
            ldargpt getchar_buf
            jsr     putchar
            ; flushkb
keyloop_lop jmp     keyloop
            cli
            jmp     infloop

start1
            jmp     infloop

start2
            jmp     infloop

start3
            jmp     infloop

;*------------------------------------------------------------------*
;*                    Interrupt Service Routine                     *
;*------------------------------------------------------------------*
irq
            pha                 ; Save registers to current stack
            txa
            pha
            tya
            pha
            
savstk
            ldy     kcurtask
            lda     #00
            sta     kstkpg_l
            lda     kstkpgs_s,y
            sta     kstkpg_h
            tsx
            stx     kstkpnts_s,y
            stx     ktmp2
            ldy     #lo $0100
            sty     ktmp0
            ldy     #hi $0100
            sty     ktmp1
            ldy     ktmp2
savstk_loop
            lda     (ktmp0),y
            sta     (kstkpg_l),y
            cpy     #$ff
            beq     lodstk
            iny
            jmp     savstk_loop
lodstk
            ldy     knxttask
            lda     #00
            sta     kstkpg_l
            lda     kstkpgs_s,y
            sta     kstkpg_h
            ldx     kstkpnts_s,y
            txs
            stx     ktmp2
            ldy     #lo $0100
            sty     ktmp0
            ldy     #hi $0100
            sty     ktmp1
            ldy     ktmp2
lodstk_loop
            lda     (kstkpg_l),y
            sta     (ktmp0),y
            cpy     #$ff
            beq     irq_ret
            iny
            jmp     lodstk_loop
irq_ret
            lda     knxttask
            sta     kcurtask
            pla
            tay
            pla
            tax
            pla
            rti

;*------------------------------------------------------------------*
;*                        Build Information                         *
;*------------------------------------------------------------------*
            code
build_code  fcb     0,1,1       ; VERSION X.Y.Z
build_ver   fcc     "VERSION"
            fcb     0
build_name  fcc     "0xOS"
            fcb     0

;*------------------------------------------------------------------*
;*                             Vectors                              *
;*------------------------------------------------------------------*
            code
            org     $fffa
nmivector   fcw     init    ; nmi vector
resvector   fcw     init    ; reset vector
irqvector   fcw     irq     ; irq vector
            end
