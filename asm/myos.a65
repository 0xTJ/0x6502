arg_16_l    equ     $10
arg_16_h    equ     arg_16_l + 1
kcurtask    equ     $80
knxttask    equ     $81
kstkpnts_s  equ     $82
kstkpnts_e  equ     kstkpnts_s + 3
kstkpgs_s   equ     $86
kstkpgs_e   equ     kstkpgs_s + 3
kstkpg_16_l equ     $90
kstkpg_16_h equ     kstkpg_16_l + 1
ktmp0       equ     $a0
ktmp1       equ     $a1
ktmp2       equ     $a2
ktmp3       equ     $a3

screenbase  equ     $0200
spritebase  equ     $0220

            data
            org     kstkpnts_s
            db      $f7, $f7, $f7, $f7
            org     kstkpgs_s
            db      $04, $05, $06, $07

            org     $04f8
            db      $00, $00, $00, $20, lo start0, hi start0
            org     $05f8
            db      $00, $00, $00, $20, lo start1, hi start1
            org     $06f8
            db      $00, $00, $00, $20, lo start2, hi start2
            org     $07f8
            db      $00, $00, $00, $20, lo start3, hi start3

;*------------------------------------------------------------------*
;*                        Kernel Initialize                         *
;*------------------------------------------------------------------*
            code
            org     $f000
init        sti
            lda     #$00
            sta     knxttask
            jmp     lodstk
            
infloop     jmp     infloop

start0      cli
            jmp     infloop

start1      jmp     infloop
            

start2      jmp     infloop

start3      jmp     infloop

;*------------------------------------------------------------------*
;*                         Display Routines                         *
;*------------------------------------------------------------------*
disp        ldy     #0
disp_loop   lda     (arg_16_l),y
            cmp     #0
            beq     disp_ret
            sta     screenbase,y
            iny
            jmp     disp_loop
disp_ret    rts

;*------------------------------------------------------------------*
;*                    Interrupt Service Routine                     *
;*------------------------------------------------------------------*
irq
            pha                 ; Save registers to current stack
            txa
            pha
            tya
            pha
            
savstk
            ldy     kcurtask
            lda     #0
            sta     kstkpg_16_l
            lda     kstkpgs_s,y
            sta     kstkpg_16_h
            tsx
            stx     kstkpnts_s,y
            stx     ktmp2
            ldy     #lo $0100
            sty     ktmp0
            ldy     #hi $0100
            sty     ktmp1
            ldy     ktmp2
savstk_loop
            lda     (ktmp0),y
            sta     (kstkpg_16_l),y
            cpy     #$ff
            beq     lodstk
            iny
            jmp     savstk_loop
lodstk
            ldy     knxttask
            lda     #0
            sta     kstkpg_16_l
            lda     kstkpgs_s,y
            sta     kstkpg_16_h
            ldx     kstkpnts_s,y
            txs
            stx     ktmp2
            ldy     #lo $0100
            sty     ktmp0
            ldy     #hi $0100
            sty     ktmp1
            ldy     ktmp2
lodstk_loop
            lda     (kstkpg_16_l),y
            sta     (ktmp0),y
            cpy     #$ff
            beq     irq_ret
            iny
            jmp     lodstk_loop
irq_ret
            lda     knxttask
            sta     kcurtask
            pla
            tay
            pla
            tax
            pla
            rti

;*------------------------------------------------------------------*
;*                        Build Information                         *
;*------------------------------------------------------------------*
            code
build
            fcb     0,1,0       ; VERSION 0.1.0
            fcc     "VERSION"
            fcb     0
            fcc     "0xOS"
            fcb     0

;*------------------------------------------------------------------*
;*                             Vectors                              *
;*------------------------------------------------------------------*
            code
            org     $fffa
nmivector   dw      nmi    ; nmi vector
resvector   dw      init    ; reset vector
irqvector   dw      irq     ; irq vector
            end
