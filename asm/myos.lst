AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
------------------------------------------------------------ myos.a65 ------------------------------------------------------------

259 lines read, no errors in pass 1.
0010 =                       arg_l       equ     $10
0011 =                       arg_h       equ     $11
0010 =                       arg_16      equ     $10
0080 =                       kcurtask    equ     $80
0081 =                       knxttask    equ     $81
0082 =                       kstkpnts_s  equ     $82
0085 =                       kstkpnts_e  equ     kstkpnts_s + 3
0086 =                       kstkpgs_s   equ     $86
0089 =                       kstkpgs_e   equ     kstkpgs_s + 3
0090 =                       kstkpg_l    equ     $90
0091 =                       kstkpg_h    equ     kstkpg_l + 1
00a0 =                       ktmp0       equ     $a0
00a1 =                       ktmp1       equ     $a1
00a2 =                       ktmp2       equ     $a2
00a3 =                       ktmp3       equ     $a3
00b0 =                       dispcur_l   equ     $b0
00b1 =                       dispcur_h   equ     $b1
                             
0100 =                       stackbase   equ     $0100
                             
0400 =                       screenbase  equ     $0400
07e7 =                       screentop   equ     $07e7
                             
0300 =                       keybrdbase  equ     $0300   ; keybrd must be contained within single page
037f =                       keybrdtop   equ     $037F
0380 =                       keybrdhead  equ     $0380
0381 =                       keybrdtail  equ     $0381
                             
                                         data
0082 =                                   org     kstkpnts_s
0082 : f7f7f7f7                          fcb      $f7, $f7, $f7, $f7
0086 =                                   org     kstkpgs_s
0086 : 08090a0b                          fcb      $08, $09, $0a, $0b
                             
00f8 =                       initstkoffs equ     $f8
0800 =                       task0_stk   equ     $0800
0900 =                       task1_stk   equ     $0900
0a00 =                       task2_stk   equ     $0a00
0b00 =                       task3_stk   equ     $0b00
                             
08f8 =                                   org     task0_stk + initstkoffs
08f8 : 0000002032f0                      fcb     $00, $00, $00, $20, lo start0, hi start0
09f8 =                                   org     task1_stk + initstkoffs
09f8 : 000000207cf0                      fcb     $00, $00, $00, $20, lo start1, hi start1
0af8 =                                   org     task2_stk + initstkoffs
0af8 : 000000207ff0                      fcb     $00, $00, $00, $20, lo start2, hi start2
0bf8 =                                   org     task3_stk + initstkoffs
0bf8 : 0000002082f0                      fcb     $00, $00, $00, $20, lo start3, hi start3
                             
                                         bss
0200 =                                   org     $0200
                                         data
0300 =                                   org     $0300
                                         code
f000 =                                   org     $f000
                                         
                             ;*------------------------------------------------------------------*
                             ;*                          General Macros                          *
                             ;*------------------------------------------------------------------*
                             ldargpt     macro   argpointer
                                         lda #lo argpointer
                                         sta arg_l
                                         lda #hi argpointer
                                         sta arg_h
                                         endm
                             
                             ;*------------------------------------------------------------------*
                             ;*                             Display                              *
                             ;*------------------------------------------------------------------*
                             string      macro   name,length,string
                                         scruct  name
                                         fcb     length
                                         fcc     string
                                         end scruct
                                         endm
                             
                             resetdisp   macro
                                         lda     #lo screenbase
                                         sta     dispcur_l
                                         lda     #hi screenbase
                                         sta     dispcur_h
                                         endm
                                         
                             flushkb     macro
                                         lda     keybrdtail
                                         sta     keybrdhead
                                         endm
                                         
f000 : a6b0             [ 3] inccur      ldx     dispcur_l       ; ARGS: N/A, STACK: 2
f002 : a4b1             [ 3]             ldy     dispcur_h
f004 : c007             [ 2]             cpy     #hi screentop
f006 : d00c             [ 3]             bne     inccur_inc
f008 : e0e7             [ 2]             cpx     #lo screentop
f00a : d008             [ 3]             bne     inccur_inc
f00c : a200             [ 2]             ldx     #lo screenbase
f00e : a004             [ 2]             ldy     #hi screenbase
f010 : a900             [ 2]             lda     #0
f012 : d004             [ 3]             bne     inccur_sto
f014 : e8               [ 2] inccur_inc  inx
f015 : d001             [ 3]             bne     inccur_sto
f017 : c8               [ 2]             iny
f018 : 86b0             [ 3] inccur_sto  stx     dispcur_l
f01a : 84b1             [ 3]             sty     dispcur_h
f01c : 60               [ 6]             rts
                                        
f01d : a200             [ 2] putchar     ldx     #0              ; ARGS: Char, STACK: 2
f01f : a110             [ 6]             lda     (arg_16,x)
f021 : 81b0             [ 6]             sta     (dispcur_l,x)
f023 : 2000f0           [ 6]             jsr     inccur
f026 : 60               [ 6]             rts
                             
                             ;*------------------------------------------------------------------*
                             ;*                             Keyboard                             *
                             ;*------------------------------------------------------------------*          
                                         bss
0200 =                       getchar_buf rmb     1
                                         code           
                             getchar     macro
                                         ldx     #0
                                         ldy     keybrdhead
                                         cpy     keybrdtail
                                         beq     getchar_ret
                                         ; We know that there is at least one char in the buffer
                                         ldy     keybrdhead  ; tmp
                                         ldx     keybrdbase,y    ; x contains the char
                                         
                                         lda     #lo keybrdtop
                                         sec
                                         sbc     #lo keybrdbase
                                         ; clc
                                         ; adc     #1    
                                         ; A contains size of buffer
                                         sec
                                         cmp     keybrdhead
                                         bne     getchar_inc
                             getchar_rst ldy     #0
                                         jmp     getchar_sto
                             getchar_inc ldy     keybrdhead
                                         iny
                             getchar_sto sty     keybrdhead
                             
                             getchar_ret stx     getchar_buf
                                         endm
                                         
                             ;*------------------------------------------------------------------*
                             ;*                        Kernel Initialize                         *
                             ;*------------------------------------------------------------------*
                                         code
f027 : 78               [ 2] init        sti ; ALL FLAGS NEED TO BE RESEt ON Boot
f028 : a900             [ 2]             lda     #$00
f02a : 8581             [ 3]             sta     knxttask
f02c : 4cb0f0           [ 3]             jmp     lodstk
                                         
f02f : 4c2ff0           [ 3] infloop     jmp     infloop
                             
f032 :                       start0
f032 : 78               [ 2]             sti
                                         resetdisp
f033 : a900             [ 2]>            lda     #lo screenbase
f035 : 85b0             [ 3]>            sta     dispcur_l
f037 : a904             [ 2]>            lda     #hi screenbase
f039 : 85b1             [ 3]>            sta     dispcur_h
                             
f03b :                       keyloop     
                                         getchar
f03b : a200             [ 2]>            ldx     #0
f03d : ac8003           [ 4]>            ldy     keybrdhead
f040 : cc8103           [ 4]>            cpy     keybrdtail
f043 : f01d             [ 3]>            beq     getchar_ret
                            >            ; We know that there is at least one char in the buffer
f045 : ac8003           [ 4]>            ldy     keybrdhead  ; tmp
f048 : be0003           [ 4]>            ldx     keybrdbase,y    ; x contains the char
                            >            
f04b : a97f             [ 2]>            lda     #lo keybrdtop
f04d : 38               [ 2]>            sec
f04e : e900             [ 2]>            sbc     #lo keybrdbase
                            >            ; clc
                            >            ; adc     #1    
                            >            ; A contains size of buffer
f050 : 38               [ 2]>            sec
f051 : cd8003           [ 4]>            cmp     keybrdhead
f054 : d005             [ 3]>            bne     getchar_inc
f056 : a000             [ 2]>getchar_rst ldy     #0
f058 : 4c5ff0           [ 3]>            jmp     getchar_sto
f05b : ac8003           [ 4]>getchar_inc ldy     keybrdhead
f05e : c8               [ 2]>            iny
f05f : 8c8003           [ 4]>getchar_sto sty     keybrdhead
                            >
f062 : 8e0002           [ 4]>getchar_ret stx     getchar_buf
                             
f065 : ad0002           [ 4]             lda     getchar_buf
f068 : f00b             [ 3]             beq     keyloop_lop
                                         ldargpt getchar_buf
f06a : a900             [ 2]>            lda #lo getchar_buf
f06c : 8510             [ 3]>            sta arg_l
f06e : a902             [ 2]>            lda #hi getchar_buf
f070 : 8511             [ 3]>            sta arg_h
                             
f072 : 201df0           [ 6]             jsr     putchar
                                         ; flushkb
f075 : 4c3bf0           [ 3] keyloop_lop jmp     keyloop
f078 : 58               [ 2]             cli
f079 : 4c2ff0           [ 3]             jmp     infloop
                             
f07c :                       start1
f07c : 4c2ff0           [ 3]             jmp     infloop
                             
f07f :                       start2
f07f : 4c2ff0           [ 3]             jmp     infloop
                             
f082 :                       start3
f082 : 4c2ff0           [ 3]             jmp     infloop
                             
                             ;*------------------------------------------------------------------*
                             ;*                    Interrupt Service Routine                     *
                             ;*------------------------------------------------------------------*
f085 :                       irq
f085 : 48               [ 3]             pha                 ; Save registers to current stack
f086 : 8a               [ 2]             txa
f087 : 48               [ 3]             pha
f088 : 98               [ 2]             tya
f089 : 48               [ 3]             pha
                                         
f08a :                       savstk
f08a : a480             [ 3]             ldy     kcurtask
f08c : a900             [ 2]             lda     #00
f08e : 8590             [ 3]             sta     kstkpg_l
f090 : b98600           [ 4]             lda     kstkpgs_s,y
f093 : 8591             [ 3]             sta     kstkpg_h
f095 : ba               [ 2]             tsx
f096 : 9682             [ 4]             stx     kstkpnts_s,y
f098 : 86a2             [ 3]             stx     ktmp2
f09a : a000             [ 2]             ldy     #lo $0100
f09c : 84a0             [ 3]             sty     ktmp0
f09e : a001             [ 2]             ldy     #hi $0100
f0a0 : 84a1             [ 3]             sty     ktmp1
f0a2 : a4a2             [ 3]             ldy     ktmp2
f0a4 :                       savstk_loop
f0a4 : b1a0             [ 5]             lda     (ktmp0),y
f0a6 : 9190             [ 5]             sta     (kstkpg_l),y
f0a8 : c0ff             [ 2]             cpy     #$ff
f0aa : f004             [ 3]             beq     lodstk
f0ac : c8               [ 2]             iny
f0ad : 4ca4f0           [ 3]             jmp     savstk_loop
f0b0 :                       lodstk
f0b0 : a481             [ 3]             ldy     knxttask
f0b2 : a900             [ 2]             lda     #00
f0b4 : 8590             [ 3]             sta     kstkpg_l
f0b6 : b98600           [ 4]             lda     kstkpgs_s,y
f0b9 : 8591             [ 3]             sta     kstkpg_h
f0bb : b682             [ 4]             ldx     kstkpnts_s,y
f0bd : 9a               [ 2]             txs
f0be : 86a2             [ 3]             stx     ktmp2
f0c0 : a000             [ 2]             ldy     #lo $0100
f0c2 : 84a0             [ 3]             sty     ktmp0
f0c4 : a001             [ 2]             ldy     #hi $0100
f0c6 : 84a1             [ 3]             sty     ktmp1
f0c8 : a4a2             [ 3]             ldy     ktmp2
f0ca :                       lodstk_loop
f0ca : b190             [ 5]             lda     (kstkpg_l),y
f0cc : 91a0             [ 5]             sta     (ktmp0),y
f0ce : c0ff             [ 2]             cpy     #$ff
f0d0 : f004             [ 3]             beq     irq_ret
f0d2 : c8               [ 2]             iny
f0d3 : 4ccaf0           [ 3]             jmp     lodstk_loop
f0d6 :                       irq_ret
f0d6 : a581             [ 3]             lda     knxttask
f0d8 : 8580             [ 3]             sta     kcurtask
f0da : 68               [ 4]             pla
f0db : a8               [ 2]             tay
f0dc : 68               [ 4]             pla
f0dd : aa               [ 2]             tax
f0de : 68               [ 4]             pla
f0df : 40               [ 6]             rti
                             
                             ;*------------------------------------------------------------------*
                             ;*                        Build Information                         *
                             ;*------------------------------------------------------------------*
                                         code
f0e0 : 000101                build_code  fcb     0,1,1       ; VERSION X.Y.Z
f0e3 : 56455253494f4e        build_ver   fcc     "VERSION"
f0ea : 00                                fcb     0
f0eb : 30784f53              build_name  fcc     "0xOS"
f0ef : 00                                fcb     0
                             
                             ;*------------------------------------------------------------------*
                             ;*                             Vectors                              *
                             ;*------------------------------------------------------------------*
                                         code
fffa =                                   org     $fffa
fffa : 27f0                  nmivector   fcw     init    ; nmi vector
fffc : 27f0                  resvector   fcw     init    ; reset vector
fffe : 85f0                  irqvector   fcw     irq     ; irq vector
                                         end
                             
-------------------------------------------- Memory Usage Map ('x'=used, '-'=unused) ---------------------------------------------

0080 : --xxxxxxxx------ ---------------- ---------------- ---------------- 
08c0 : ---------------- ---------------- ---------------- --------xxxxxx-- 
09c0 : ---------------- ---------------- ---------------- --------xxxxxx-- 
0ac0 : ---------------- ---------------- ---------------- --------xxxxxx-- 
0bc0 : ---------------- ---------------- ---------------- --------xxxxxx-- 
f000 : xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx 
f040 : xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx 
f080 : xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx 
f0c0 : xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx ---------------- 
ffc0 : ---------------- ---------------- ---------------- ----------xxxxxx 

No errors in pass 2.
